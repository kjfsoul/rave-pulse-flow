name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Quality gates - run in parallel
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type checking
        run: npx tsc --noEmit
        continue-on-error: false

  # Security scanning
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: false
      
      - name: Run security audit with npm-audit-resolver
        run: npx npm-audit-resolver
        continue-on-error: false

  # Testing jobs - run in parallel after quality gates pass
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, typecheck, audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        if: github.event_name != 'pull_request'
        run: npx playwright install --with-deps
      
      - name: Run unit tests
        run: npm test:unit
        continue-on-error: false
      
      - name: Upload coverage reports
        if: github.event_name != 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests-coverage

  e2e-tests:
    name: E2E Tests Playwright
    runs-on: ubuntu-latest
    needs: [lint, typecheck, audit]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        continue-on-error: false
        env:
          PLAYWRIGHT_JUNIT_REPORT_NAME: e2e-tests
          PLAYWRIGHT_JUNIT_OUTPUT_DIR: test-results/e2e
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: true
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: test-results/

  # Build and deployment
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  # Database migration validation
  validate-db:
    name: Validate Database Schema
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
      
      - name: Validate database schema
        run: |
          if [ -f "crew_deployment.sql" ]; then
            echo "Validating database schema..."
            # Basic SQL syntax validation
            if grep -q "CREATE TABLE" crew_deployment.sql; then
              echo "‚úÖ Database schema contains valid SQL"
            else
              echo "‚ùå Database schema validation failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  Database schema file not found, skipping validation"
          fi
      
      - name: Validate Supabase functions
        run: |
          if [ -d "supabase/functions" ]; then
            echo "Validating Supabase Edge Functions..."
            function_count=0
            for func_dir in supabase/functions/*; do
              if [ -d "$func_dir" ] && [ -f "$func_dir/index.ts" ]; then
                function_count=$((function_count + 1))
                echo "‚úÖ Found Edge Function: $(basename "$func_dir")"
              fi
            done
            if [ $function_count -gt 0 ]; then
              echo "‚úÖ Found $function_count Edge Functions"
            else
              echo "‚ö†Ô∏è  No Edge Functions found"
            fi
          else
            echo "‚ö†Ô∏è  Edge Functions directory not found"
          fi

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, validate-db]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Deploy to Supabase
        run: |
          echo "üöÄ Starting deployment to Supabase..."
          
          # Check if Supabase CLI is installed
          if ! command -v supabase &> /dev/null; then
            echo "‚ùå Supabase CLI not found. Please install it first."
            exit 1
          fi
          
          # Deploy database schema
          if [ -f "crew_deployment.sql" ]; then
            echo "üìä Deploying database schema..."
            supabase db push
          fi
          
          # Deploy Edge Functions
          if [ -d "supabase/functions" ]; then
            echo "üîß Deploying Edge Functions..."
            for func_dir in supabase/functions/*; do
              if [ -d "$func_dir" ] && [ -f "$func_dir/index.ts" ]; then
                func_name=$(basename "$func_dir")
                echo "üì¶ Deploying function: $func_name"
                supabase functions deploy $func_name
              fi
            done
          fi
          
          echo "‚úÖ Deployment completed successfully!"

  # Performance monitoring
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
      - name: Run Lighthouse CI
        run: lhci autorun
        continue-on-error: true
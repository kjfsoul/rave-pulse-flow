{"version":"1.128.0","results":[],"errors":[{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line agent/main.ts:1:\n `import path from 'path';\nimport { getNextPendingTask, updateTaskStatus, requeueTask } from './supabaseClient';\nimport { submitPromptToClaude } from './claudeClient';\nimport { validateCode } from './validation';\nimport { deployCode } from './deploy';\nimport { error } from 'console';\n\nconst MAX_RETRIES = 3;\n\nasync function runAgentLoop() {\n  while (true) {\n    const task = await getNextPendingTask();\n\n    if (!task) {\n      console.log('No pending tasks. Sleeping for 1 minute...');\n      await new Promise((r) => setTimeout(r, 60000));\n      continue;\n    }\n\n    console.log(`Processing task: ${task.id} - ${task.description}`);\n\n    await updateTaskStatus(task.id, 'in_progress');\n\n    // Fill prompt template\n    const prompt = task.promptTemplate\n      .replace(/{{description}}/g, task.description)\n      .replace(/{{lastResult}}/g, task.lastResult ?? '');\n\n    let response: string;\n\n    try {\n      response = await submitPromptToClaude(prompt);\n    } catch (error: any) {\n      await updateTaskStatus(task.id, 'failed', `API error: ${error.message || error}`);\n      continue;\n    }\n\n    // Extract code block(s) from response (support multiple code blocks)\n    // This regex matches all code blocks with optional language specifier\n    const codeBlocks = [...response.matchAll(/```\n(?:ts|typescript)?\\n([\\s\\S]*?)\n```/gi)];\n    const code = codeBlocks.length > 0 ? codeBlocks.map(m => m[1]).join('\\n\\n') : response;\n\n    // Save code temporarily\n    const tempFilePath = path.resolve(__dirname, 'generatedCode.ts');\n    await deployCode('generatedCode.ts', code);\n\n    const isValid = await validateCode(tempFilePath);\n\n    if (isValid) {\n      await updateTaskStatus(task.id, 'completed', response);\n      console.log(`Task ${task.id} completed.`);\n    } else {\n      task.lastResult = response;\n      task.retries++;\n\n      if (task.retries >= MAX_RETRIES) {\n        await updateTaskStatus(task.id, 'failed', response);\n        console.error(`Task ${task.id} failed after ${MAX_RETRIES} retries.`);\n        // TODO: Notify human via em... (truncated 2381 more characters)","path":"agent/main.ts"}],"paths":{"scanned":["agent/config.ts","agent/deploy.ts","agent/main.ts","agent/types.ts","agent/validation.ts","eslint.config.js","postcss.config.js","src/App.tsx","src/components/ArchetypeAuraMeter.tsx","src/components/ArchetypeRevealCeremony.tsx","src/components/ArtistSpotlightCarousel.tsx","src/components/AudioEqualizerDemo.tsx","src/components/AvatarSummonModal.tsx","src/components/BottomNavigation.tsx","src/components/EqualizerBars.tsx","src/components/EqualizerLive.tsx","src/components/FloatingSneakers.tsx","src/components/LaserRaveBackground.tsx","src/components/NeonButton.tsx","src/components/PLUROrbsAnimation.tsx","src/components/PLURcrewSidebar.tsx","src/components/PLURstreakMeter.tsx","src/components/ParticleBurstAnimation.tsx","src/components/QuizBackgroundAnimation.tsx","src/components/RSSFeedStreamer.tsx","src/components/ScrollHintArrow.tsx","src/components/ShuffleDancers.tsx","src/components/VibePreview.tsx","src/components/VisualFX/ArchetypeAuraSprite.tsx","src/components/VisualFX/FestivalStageBackground.tsx","src/components/VisualFX/LightSyncPulse.tsx","src/components/VisualFX/ShuffleDancers.tsx","src/components/audio-ui/BpmAura.tsx","src/components/audio-ui/ConfettiBurst.tsx","src/components/audio-ui/Crossfader.tsx","src/components/audio-ui/CrowdFXLayer.tsx","src/components/audio-ui/DJDeck.tsx","src/components/audio-ui/DebugHUD.tsx","src/components/audio-ui/EnhancedDJDeck.tsx","src/components/audio-ui/EnhancedDebugHUD.tsx","src/components/audio-ui/EnhancedWaveformVisualizer.tsx","src/components/audio-ui/MiniPlayer.tsx","src/components/audio-ui/SubscribeBanner.tsx","src/components/audio-ui/SubscribeModal.tsx","src/components/audio-ui/TrackSelectModal.tsx","src/components/audio-ui/VoiceControlPanel.tsx","src/components/audio-ui/WaveformVisualizer.tsx","src/components/auth/AuthForm.tsx","src/components/auth/ProtectedRoute.tsx","src/components/auth/UserProfile.tsx","src/components/ui/accordion.tsx","src/components/ui/alert-dialog.tsx","src/components/ui/alert.tsx","src/components/ui/aspect-ratio.tsx","src/components/ui/avatar.tsx","src/components/ui/badge.tsx","src/components/ui/breadcrumb.tsx","src/components/ui/button.tsx","src/components/ui/calendar.tsx","src/components/ui/card.tsx","src/components/ui/carousel.tsx","src/components/ui/chart.tsx","src/components/ui/checkbox.tsx","src/components/ui/collapsible.tsx","src/components/ui/command.tsx","src/components/ui/context-menu.tsx","src/components/ui/dialog.tsx","src/components/ui/drawer.tsx","src/components/ui/dropdown-menu.tsx","src/components/ui/form.tsx","src/components/ui/hover-card.tsx","src/components/ui/input-otp.tsx","src/components/ui/input.tsx","src/components/ui/label.tsx","src/components/ui/menubar.tsx","src/components/ui/navigation-menu.tsx","src/components/ui/pagination.tsx","src/components/ui/popover.tsx","src/components/ui/progress.tsx","src/components/ui/radio-group.tsx","src/components/ui/resizable.tsx","src/components/ui/scroll-area.tsx","src/components/ui/select.tsx","src/components/ui/separator.tsx","src/components/ui/sheet.tsx","src/components/ui/sidebar.tsx","src/components/ui/skeleton.tsx","src/components/ui/slider.tsx","src/components/ui/sonner.tsx","src/components/ui/switch.tsx","src/components/ui/table.tsx","src/components/ui/tabs.tsx","src/components/ui/textarea.tsx","src/components/ui/toast.tsx","src/components/ui/toaster.tsx","src/components/ui/toggle-group.tsx","src/components/ui/toggle.tsx","src/components/ui/tooltip.tsx","src/components/ui/use-toast.ts","src/contexts/AudioContext.tsx","src/contexts/AuthContext.tsx","src/hooks/use-mobile.tsx","src/hooks/use-toast.ts","src/hooks/useAudioEngine.ts","src/hooks/useAudioPlayer.ts","src/hooks/useRealAudioEngine.ts","src/hooks/useTTS.ts","src/hooks/useVoiceCommands.ts","src/lib/database.ts","src/lib/stripe.ts","src/lib/supabase.ts","src/lib/utils.ts","src/main.tsx","src/pages/ArchetypeQuiz.tsx","src/pages/DJMixStation.tsx","src/pages/FestivalVotingStage.tsx","src/pages/Index.tsx","src/pages/MarketplaceGrid.tsx","src/pages/NotFound.tsx","src/pages/Profile.tsx","src/pages/ShuffleFeed.tsx","src/utils/audioGenerator.ts","src/vite-env.d.ts","tailwind.config.ts","vite.config.ts"]},"time":{"rules":[],"rules_parse_time":0.17406320571899414,"profiling_times":{"config_time":0.6534109115600586,"core_time":0.6185438632965088,"ignores_time":7.700920104980469e-05,"total_time":1.2722477912902832},"parsing_time":{"total_time":0.1230158805847168,"per_file_time":{"mean":0.009462760044978214,"std_dev":5.4763183692632845e-05},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":196120512},"skipped_rules":[]}
